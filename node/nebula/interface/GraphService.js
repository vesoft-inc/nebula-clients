//
// Autogenerated by Thrift Compiler
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES
var thrift = require('thrift');
var Thrift = thrift.Thrift
var Q = thrift.Q

if (typeof nebula === 'undefined') {
  nebula = {};
}
if (typeof nebula.graph === 'undefined') {
  nebula.graph = {};
}

nebula.graph.GraphService_authenticate_args = function(args) {
  this.username = null;
  this.password = null;
  if (args) {
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
  }
};
nebula.graph.GraphService_authenticate_args.prototype = {};
nebula.graph.GraphService_authenticate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

nebula.graph.GraphService_authenticate_args.prototype.write = function(output) {
  output.writeStructBegin('GraphService_authenticate_args');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

nebula.graph.GraphService_authenticate_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
nebula.graph.GraphService_authenticate_result.prototype = {};
nebula.graph.GraphService_authenticate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new nebula.graph.AuthResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

nebula.graph.GraphService_authenticate_result.prototype.write = function(output) {
  output.writeStructBegin('GraphService_authenticate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

nebula.graph.GraphService_signout_args = function(args) {
  this.sessionId = null;
  if (args) {
    if (args.sessionId !== undefined) {
      this.sessionId = args.sessionId;
    }
  }
};
nebula.graph.GraphService_signout_args.prototype = {};
nebula.graph.GraphService_signout_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.sessionId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

nebula.graph.GraphService_signout_args.prototype.write = function(output) {
  output.writeStructBegin('GraphService_signout_args');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.I64, 1);
    output.writeI64(this.sessionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

nebula.graph.GraphService_signout_result = function(args) {
};
nebula.graph.GraphService_signout_result.prototype = {};
nebula.graph.GraphService_signout_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

nebula.graph.GraphService_signout_result.prototype.write = function(output) {
  output.writeStructBegin('GraphService_signout_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

nebula.graph.GraphService_execute_args = function(args) {
  this.sessionId = null;
  this.stmt = null;
  if (args) {
    if (args.sessionId !== undefined) {
      this.sessionId = args.sessionId;
    }
    if (args.stmt !== undefined) {
      this.stmt = args.stmt;
    }
  }
};
nebula.graph.GraphService_execute_args.prototype = {};
nebula.graph.GraphService_execute_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.sessionId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.stmt = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

nebula.graph.GraphService_execute_args.prototype.write = function(output) {
  output.writeStructBegin('GraphService_execute_args');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.I64, 1);
    output.writeI64(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.stmt !== null && this.stmt !== undefined) {
    output.writeFieldBegin('stmt', Thrift.Type.STRING, 2);
    output.writeString(this.stmt);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

nebula.graph.GraphService_execute_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
nebula.graph.GraphService_execute_result.prototype = {};
nebula.graph.GraphService_execute_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new nebula.graph.ExecutionResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

nebula.graph.GraphService_execute_result.prototype.write = function(output) {
  output.writeStructBegin('GraphService_execute_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

nebula.graph.GraphService_executeJson_args = function(args) {
  this.sessionId = null;
  this.stmt = null;
  if (args) {
    if (args.sessionId !== undefined) {
      this.sessionId = args.sessionId;
    }
    if (args.stmt !== undefined) {
      this.stmt = args.stmt;
    }
  }
};
nebula.graph.GraphService_executeJson_args.prototype = {};
nebula.graph.GraphService_executeJson_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.sessionId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.stmt = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

nebula.graph.GraphService_executeJson_args.prototype.write = function(output) {
  output.writeStructBegin('GraphService_executeJson_args');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.I64, 1);
    output.writeI64(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.stmt !== null && this.stmt !== undefined) {
    output.writeFieldBegin('stmt', Thrift.Type.STRING, 2);
    output.writeString(this.stmt);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

nebula.graph.GraphService_executeJson_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
nebula.graph.GraphService_executeJson_result.prototype = {};
nebula.graph.GraphService_executeJson_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

nebula.graph.GraphService_executeJson_result.prototype.write = function(output) {
  output.writeStructBegin('GraphService_executeJson_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

nebula.graph.GraphServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
nebula.graph.GraphServiceClient.prototype = {};
nebula.graph.GraphServiceClient.prototype.seqid = function() { return this._seqid; };
nebula.graph.GraphServiceClient.prototype.new_seqid = function() { return this._seqid += 1; };

nebula.graph.GraphServiceClient.prototype.authenticate = function(username, password, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_authenticate(username, password);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_authenticate(username, password);
  }
};

nebula.graph.GraphServiceClient.prototype.send_authenticate = function(username, password) {
  var output = new this.pClass(this.output);
  var args = new nebula.graph.GraphService_authenticate_args();
  args.username = username;
  args.password = password;
  try {
    output.writeMessageBegin('authenticate', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

nebula.graph.GraphServiceClient.prototype.recv_authenticate = function(input, mtype, rseqid) {
  try {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new nebula.graph.GraphService_authenticate_result();
    result.read(input);
    input.readMessageEnd();

    callback(result);
  }
  catch (e) {
    throw e;
  }
};

nebula.graph.GraphServiceClient.prototype.signout = function(sessionId) {
  this.send_signout(sessionId);
};

nebula.graph.GraphServiceClient.prototype.send_signout = function(sessionId) {
  var output = new this.pClass(this.output);
  var args = new nebula.graph.GraphService_signout_args();
  args.sessionId = sessionId;
  try {
    output.writeMessageBegin('signout', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};
nebula.graph.GraphServiceClient.prototype.execute = function(sessionId, stmt, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_execute(sessionId, stmt);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_execute(sessionId, stmt);
  }
};

nebula.graph.GraphServiceClient.prototype.send_execute = function(sessionId, stmt) {
  var output = new this.pClass(this.output);
  var args = new nebula.graph.GraphService_execute_args();
  args.sessionId = sessionId;
  args.stmt = stmt;
  try {
    output.writeMessageBegin('execute', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

nebula.graph.GraphServiceClient.prototype.recv_execute = function(input,mtype,rseqid) {
  try {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new nebula.graph.GraphService_execute_result();
    result.read(input);
    input.readMessageEnd();
    callback(result);
  }
  catch (e) {
    throw e;
  }
};
nebula.graph.GraphServiceClient.prototype.executeJson = function(sessionId, stmt, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_executeJson(sessionId, stmt);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_executeJson(sessionId, stmt);
  }
};

nebula.graph.GraphServiceClient.prototype.send_executeJson = function(sessionId, stmt) {
  var output = new this.pClass(this.output);
  var args = new nebula.graph.GraphService_executeJson_args();
  args.sessionId = sessionId;
  args.stmt = stmt;
  try {
    output.writeMessageBegin('execute', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

nebula.graph.GraphServiceClient.prototype.recv_executeJson = function() {
  try {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new nebula.graph.GraphService_executeJson_result();
    result.read(input);
    input.readMessageEnd();

    callback(result);
  }
  catch (e) {
    throw e;
  }
};
