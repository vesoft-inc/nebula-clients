//
// Autogenerated by Thrift Compiler
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

//var thrift = require('thrift');
var thrift = require('thrift');
var Thrift = thrift.Thrift;

if (typeof nebula === 'undefined') {
  nebula = {};
}
nebula.NullType = {
'__NULL__' : 0,
'NaN' : 1,
'BAD_DATA' : 2,
'BAD_TYPE' : 3,
'ERR_OVERFLOW' : 4,
'UNKNOWN_PROP' : 5,
'DIV_BY_ZERO' : 6,
'OUT_OF_RANGE' : 7
};
nebula.Date = function(args) {
  this.year = null;
  this.month = null;
  this.day = null;
  if (args) {
    if (args.year !== undefined) {
      this.year = args.year;
    }
    if (args.month !== undefined) {
      this.month = args.month;
    }
    if (args.day !== undefined) {
      this.day = args.day;
    }
  }
};
nebula.Date.prototype = {};
nebula.Date.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I16) {
        this.year = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this.month = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BYTE) {
        this.day = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

nebula.Date.prototype.write = function(output) {
  output.writeStructBegin('Date');
  if (this.year !== null && this.year !== undefined) {
    output.writeFieldBegin('year', Thrift.Type.I16, 1);
    output.writeI16(this.year);
    output.writeFieldEnd();
  }
  if (this.month !== null && this.month !== undefined) {
    output.writeFieldBegin('month', Thrift.Type.BYTE, 2);
    output.writeByte(this.month);
    output.writeFieldEnd();
  }
  if (this.day !== null && this.day !== undefined) {
    output.writeFieldBegin('day', Thrift.Type.BYTE, 3);
    output.writeByte(this.day);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

nebula.Time = function(args) {
  this.hour = null;
  this.minute = null;
  this.sec = null;
  this.microsec = null;
  if (args) {
    if (args.hour !== undefined) {
      this.hour = args.hour;
    }
    if (args.minute !== undefined) {
      this.minute = args.minute;
    }
    if (args.sec !== undefined) {
      this.sec = args.sec;
    }
    if (args.microsec !== undefined) {
      this.microsec = args.microsec;
    }
  }
};
nebula.Time.prototype = {};
nebula.Time.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this.hour = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this.minute = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BYTE) {
        this.sec = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.microsec = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

nebula.Time.prototype.write = function(output) {
  output.writeStructBegin('Time');
  if (this.hour !== null && this.hour !== undefined) {
    output.writeFieldBegin('hour', Thrift.Type.BYTE, 1);
    output.writeByte(this.hour);
    output.writeFieldEnd();
  }
  if (this.minute !== null && this.minute !== undefined) {
    output.writeFieldBegin('minute', Thrift.Type.BYTE, 2);
    output.writeByte(this.minute);
    output.writeFieldEnd();
  }
  if (this.sec !== null && this.sec !== undefined) {
    output.writeFieldBegin('sec', Thrift.Type.BYTE, 3);
    output.writeByte(this.sec);
    output.writeFieldEnd();
  }
  if (this.microsec !== null && this.microsec !== undefined) {
    output.writeFieldBegin('microsec', Thrift.Type.I32, 4);
    output.writeI32(this.microsec);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

nebula.DateTime = function(args) {
  this.year = null;
  this.month = null;
  this.day = null;
  this.hour = null;
  this.minute = null;
  this.sec = null;
  this.microsec = null;
  if (args) {
    if (args.year !== undefined) {
      this.year = args.year;
    }
    if (args.month !== undefined) {
      this.month = args.month;
    }
    if (args.day !== undefined) {
      this.day = args.day;
    }
    if (args.hour !== undefined) {
      this.hour = args.hour;
    }
    if (args.minute !== undefined) {
      this.minute = args.minute;
    }
    if (args.sec !== undefined) {
      this.sec = args.sec;
    }
    if (args.microsec !== undefined) {
      this.microsec = args.microsec;
    }
  }
};
nebula.DateTime.prototype = {};
nebula.DateTime.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I16) {
        this.year = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this.month = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BYTE) {
        this.day = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BYTE) {
        this.hour = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BYTE) {
        this.minute = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BYTE) {
        this.sec = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.microsec = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

nebula.DateTime.prototype.write = function(output) {
  output.writeStructBegin('DateTime');
  if (this.year !== null && this.year !== undefined) {
    output.writeFieldBegin('year', Thrift.Type.I16, 1);
    output.writeI16(this.year);
    output.writeFieldEnd();
  }
  if (this.month !== null && this.month !== undefined) {
    output.writeFieldBegin('month', Thrift.Type.BYTE, 2);
    output.writeByte(this.month);
    output.writeFieldEnd();
  }
  if (this.day !== null && this.day !== undefined) {
    output.writeFieldBegin('day', Thrift.Type.BYTE, 3);
    output.writeByte(this.day);
    output.writeFieldEnd();
  }
  if (this.hour !== null && this.hour !== undefined) {
    output.writeFieldBegin('hour', Thrift.Type.BYTE, 4);
    output.writeByte(this.hour);
    output.writeFieldEnd();
  }
  if (this.minute !== null && this.minute !== undefined) {
    output.writeFieldBegin('minute', Thrift.Type.BYTE, 5);
    output.writeByte(this.minute);
    output.writeFieldEnd();
  }
  if (this.sec !== null && this.sec !== undefined) {
    output.writeFieldBegin('sec', Thrift.Type.BYTE, 6);
    output.writeByte(this.sec);
    output.writeFieldEnd();
  }
  if (this.microsec !== null && this.microsec !== undefined) {
    output.writeFieldBegin('microsec', Thrift.Type.I32, 7);
    output.writeI32(this.microsec);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

nebula.Value = function(args) {
  this.nVal = null;
  this.bVal = null;
  this.iVal = null;
  this.fVal = null;
  this.sVal = null;
  this.dVal = null;
  this.tVal = null;
  this.dtVal = null;
  this.vVal = null;
  this.eVal = null;
  this.pVal = null;
  this.lVal = null;
  this.mVal = null;
  this.uVal = null;
  this.gVal = null;
  if (args) {
    if (args.nVal !== undefined) {
      this.nVal = args.nVal;
    }
    if (args.bVal !== undefined) {
      this.bVal = args.bVal;
    }
    if (args.iVal !== undefined) {
      this.iVal = args.iVal;
    }
    if (args.fVal !== undefined) {
      this.fVal = args.fVal;
    }
    if (args.sVal !== undefined) {
      this.sVal = args.sVal;
    }
    if (args.dVal !== undefined) {
      this.dVal = args.dVal;
    }
    if (args.tVal !== undefined) {
      this.tVal = args.tVal;
    }
    if (args.dtVal !== undefined) {
      this.dtVal = args.dtVal;
    }
    if (args.vVal !== undefined) {
      this.vVal = args.vVal;
    }
    if (args.eVal !== undefined) {
      this.eVal = args.eVal;
    }
    if (args.pVal !== undefined) {
      this.pVal = args.pVal;
    }
    if (args.lVal !== undefined) {
      this.lVal = args.lVal;
    }
    if (args.mVal !== undefined) {
      this.mVal = args.mVal;
    }
    if (args.uVal !== undefined) {
      this.uVal = args.uVal;
    }
    if (args.gVal !== undefined) {
      this.gVal = args.gVal;
    }
  }
};
nebula.Value.prototype = {};
nebula.Value.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.nVal = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.bVal = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.iVal = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.fVal = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.sVal = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.dVal = new nebula.Date();
        this.dVal.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.tVal = new nebula.Time();
        this.tVal.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.dtVal = new nebula.DateTime();
        this.dtVal.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.vVal = new nebula.Vertex();
        this.vVal.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.eVal = new nebula.Edge();
        this.eVal.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.pVal = new nebula.Path();
        this.pVal.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRUCT) {
        this.lVal = new nebula.List();
        this.lVal.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRUCT) {
        this.mVal = new nebula.Map();
        this.mVal.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRUCT) {
        this.uVal = new nebula.Set();
        this.uVal.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRUCT) {
        this.gVal = new nebula.DataSet();
        this.gVal.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

nebula.Value.prototype.write = function(output) {
  output.writeStructBegin('Value');
  if (this.nVal !== null && this.nVal !== undefined) {
    output.writeFieldBegin('nVal', Thrift.Type.I32, 1);
    output.writeI32(this.nVal);
    output.writeFieldEnd();
  }
  if (this.bVal !== null && this.bVal !== undefined) {
    output.writeFieldBegin('bVal', Thrift.Type.BOOL, 2);
    output.writeBool(this.bVal);
    output.writeFieldEnd();
  }
  if (this.iVal !== null && this.iVal !== undefined) {
    output.writeFieldBegin('iVal', Thrift.Type.I64, 3);
    output.writeI64(this.iVal);
    output.writeFieldEnd();
  }
  if (this.fVal !== null && this.fVal !== undefined) {
    output.writeFieldBegin('fVal', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.fVal);
    output.writeFieldEnd();
  }
  if (this.sVal !== null && this.sVal !== undefined) {
    output.writeFieldBegin('sVal', Thrift.Type.STRING, 5);
    output.writeString(this.sVal);
    output.writeFieldEnd();
  }
  if (this.dVal !== null && this.dVal !== undefined) {
    output.writeFieldBegin('dVal', Thrift.Type.STRUCT, 6);
    this.dVal.write(output);
    output.writeFieldEnd();
  }
  if (this.tVal !== null && this.tVal !== undefined) {
    output.writeFieldBegin('tVal', Thrift.Type.STRUCT, 7);
    this.tVal.write(output);
    output.writeFieldEnd();
  }
  if (this.dtVal !== null && this.dtVal !== undefined) {
    output.writeFieldBegin('dtVal', Thrift.Type.STRUCT, 8);
    this.dtVal.write(output);
    output.writeFieldEnd();
  }
  if (this.vVal !== null && this.vVal !== undefined) {
    output.writeFieldBegin('vVal', Thrift.Type.STRUCT, 9);
    this.vVal.write(output);
    output.writeFieldEnd();
  }
  if (this.eVal !== null && this.eVal !== undefined) {
    output.writeFieldBegin('eVal', Thrift.Type.STRUCT, 10);
    this.eVal.write(output);
    output.writeFieldEnd();
  }
  if (this.pVal !== null && this.pVal !== undefined) {
    output.writeFieldBegin('pVal', Thrift.Type.STRUCT, 11);
    this.pVal.write(output);
    output.writeFieldEnd();
  }
  if (this.lVal !== null && this.lVal !== undefined) {
    output.writeFieldBegin('lVal', Thrift.Type.STRUCT, 12);
    this.lVal.write(output);
    output.writeFieldEnd();
  }
  if (this.mVal !== null && this.mVal !== undefined) {
    output.writeFieldBegin('mVal', Thrift.Type.STRUCT, 13);
    this.mVal.write(output);
    output.writeFieldEnd();
  }
  if (this.uVal !== null && this.uVal !== undefined) {
    output.writeFieldBegin('uVal', Thrift.Type.STRUCT, 14);
    this.uVal.write(output);
    output.writeFieldEnd();
  }
  if (this.gVal !== null && this.gVal !== undefined) {
    output.writeFieldBegin('gVal', Thrift.Type.STRUCT, 15);
    this.gVal.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

nebula.List = function(args) {
  this.values = null;
  if (args) {
    if (args.values !== undefined) {
      this.values = args.values;
    }
  }
};
nebula.List.prototype = {};
nebula.List.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.values = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new nebula.Value();
          elem6.read(input);
          this.values.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

nebula.List.prototype.write = function(output) {
  output.writeStructBegin('List');
  if (this.values !== null && this.values !== undefined) {
    output.writeFieldBegin('values', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.values.length);
    for (var iter7 in this.values)
    {
      if (this.values.hasOwnProperty(iter7))
      {
        iter7 = this.values[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

nebula.Map = function(args) {
  this.kvs = null;
  if (args) {
    if (args.kvs !== undefined) {
      this.kvs = args.kvs;
    }
  }
};
nebula.Map.prototype = {};
nebula.Map.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size8 = 0;
        var _rtmp312;
        this.kvs = {};
        var _ktype9 = 0;
        var _vtype10 = 0;
        _rtmp312 = input.readMapBegin();
        _ktype9 = _rtmp312.ktype;
        _vtype10 = _rtmp312.vtype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          if (_i13 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key14 = null;
          var val15 = null;
          key14 = input.readString();
          val15 = new nebula.Value();
          val15.read(input);
          this.kvs[key14] = val15;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

nebula.Map.prototype.write = function(output) {
  output.writeStructBegin('Map');
  if (this.kvs !== null && this.kvs !== undefined) {
    output.writeFieldBegin('kvs', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.kvs));
    for (var kiter16 in this.kvs)
    {
      if (this.kvs.hasOwnProperty(kiter16))
      {
        var viter17 = this.kvs[kiter16];
        output.writeString(kiter16);
        viter17.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

nebula.Set = function(args) {
  this.values = null;
  if (args) {
    if (args.values !== undefined) {
      this.values = args.values;
    }
  }
};
nebula.Set.prototype = {};
nebula.Set.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.SET) {
        var _size18 = 0;
        var _rtmp322;
        this.values = [];
        var _etype21 = 0;
        _rtmp322 = input.readSetBegin();
        _etype21 = _rtmp322.etype;
        _size18 = _rtmp322.size;
        for (var _i23 = 0; _i23 < _size18; ++_i23)
        {
          var elem24 = null;
          elem24 = new nebula.Value();
          elem24.read(input);
          this.values.push(elem24);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

nebula.Set.prototype.write = function(output) {
  output.writeStructBegin('Set');
  if (this.values !== null && this.values !== undefined) {
    output.writeFieldBegin('values', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.STRUCT, this.values.length);
    for (var iter25 in this.values)
    {
      if (this.values.hasOwnProperty(iter25))
      {
        iter25 = this.values[iter25];
        iter25.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

nebula.Row = function(args) {
  this.values = null;
  if (args) {
    if (args.values !== undefined) {
      this.values = args.values;
    }
  }
};
nebula.Row.prototype = {};
nebula.Row.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size26 = 0;
        var _rtmp330;
        this.values = [];
        var _etype29 = 0;
        _rtmp330 = input.readListBegin();
        _etype29 = _rtmp330.etype;
        _size26 = _rtmp330.size;
        for (var _i31 = 0; _i31 < _size26; ++_i31)
        {
          var elem32 = null;
          elem32 = new nebula.Value();
          elem32.read(input);
          this.values.push(elem32);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

nebula.Row.prototype.write = function(output) {
  output.writeStructBegin('Row');
  if (this.values !== null && this.values !== undefined) {
    output.writeFieldBegin('values', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.values.length);
    for (var iter33 in this.values)
    {
      if (this.values.hasOwnProperty(iter33))
      {
        iter33 = this.values[iter33];
        iter33.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

nebula.DataSet = function(args) {
  this.column_names = null;
  this.rows = null;
  if (args) {
    if (args.column_names !== undefined) {
      this.column_names = args.column_names;
    }
    if (args.rows !== undefined) {
      this.rows = args.rows;
    }
  }
};
nebula.DataSet.prototype = {};
nebula.DataSet.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size34 = 0;
        var _rtmp338;
        this.column_names = [];
        var _etype37 = 0;
        _rtmp338 = input.readListBegin();
        _etype37 = _rtmp338.etype;
        _size34 = _rtmp338.size;
        for (var _i39 = 0; _i39 < _size34; ++_i39)
        {
          var elem40 = null;
          elem40 = input.readString();
          this.column_names.push(elem40);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size41 = 0;
        var _rtmp345;
        this.rows = [];
        var _etype44 = 0;
        _rtmp345 = input.readListBegin();
        _etype44 = _rtmp345.etype;
        _size41 = _rtmp345.size;
        for (var _i46 = 0; _i46 < _size41; ++_i46)
        {
          var elem47 = null;
          elem47 = new nebula.Row();
          elem47.read(input);
          this.rows.push(elem47);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

nebula.DataSet.prototype.write = function(output) {
  output.writeStructBegin('DataSet');
  if (this.column_names !== null && this.column_names !== undefined) {
    output.writeFieldBegin('column_names', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.column_names.length);
    for (var iter48 in this.column_names)
    {
      if (this.column_names.hasOwnProperty(iter48))
      {
        iter48 = this.column_names[iter48];
        output.writeString(iter48);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.rows !== null && this.rows !== undefined) {
    output.writeFieldBegin('rows', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.rows.length);
    for (var iter49 in this.rows)
    {
      if (this.rows.hasOwnProperty(iter49))
      {
        iter49 = this.rows[iter49];
        iter49.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

nebula.Tag = function(args) {
  this.name = null;
  this.props = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.props !== undefined) {
      this.props = args.props;
    }
  }
};
nebula.Tag.prototype = {};
nebula.Tag.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size50 = 0;
        var _rtmp354;
        this.props = {};
        var _ktype51 = 0;
        var _vtype52 = 0;
        _rtmp354 = input.readMapBegin();
        _ktype51 = _rtmp354.ktype;
        _vtype52 = _rtmp354.vtype;
        _size50 = _rtmp354.size;
        for (var _i55 = 0; _i55 < _size50; ++_i55)
        {
          if (_i55 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key56 = null;
          var val57 = null;
          key56 = input.readString();
          val57 = new nebula.Value();
          val57.read(input);
          this.props[key56] = val57;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

nebula.Tag.prototype.write = function(output) {
  output.writeStructBegin('Tag');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.props !== null && this.props !== undefined) {
    output.writeFieldBegin('props', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.props));
    for (var kiter58 in this.props)
    {
      if (this.props.hasOwnProperty(kiter58))
      {
        var viter59 = this.props[kiter58];
        output.writeString(kiter58);
        viter59.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

nebula.Vertex = function(args) {
  this.vid = null;
  this.tags = null;
  if (args) {
    if (args.vid !== undefined) {
      this.vid = args.vid;
    }
    if (args.tags !== undefined) {
      this.tags = args.tags;
    }
  }
};
nebula.Vertex.prototype = {};
nebula.Vertex.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.vid = input.readString()
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size60 = 0;
        var _rtmp364;
        this.tags = [];
        var _etype63 = 0;
        _rtmp364 = input.readListBegin();
        _etype63 = _rtmp364.etype;
        _size60 = _rtmp364.size;
        for (var _i65 = 0; _i65 < _size60; ++_i65)
        {
          var elem66 = null;
          elem66 = new nebula.Tag();
          elem66.read(input);
          this.tags.push(elem66);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

nebula.Vertex.prototype.write = function(output) {
  output.writeStructBegin('Vertex');
  if (this.vid !== null && this.vid !== undefined) {
    output.writeFieldBegin('vid', Thrift.Type.STRING, 1);
    output.writeString(this.vid);
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.tags.length);
    for (var iter67 in this.tags)
    {
      if (this.tags.hasOwnProperty(iter67))
      {
        iter67 = this.tags[iter67];
        iter67.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

nebula.Edge = function(args) {
  this.src = null;
  this.dst = null;
  this.type = null;
  this.name = null;
  this.ranking = null;
  this.props = null;
  if (args) {
    if (args.src !== undefined) {
      this.src = args.src;
    }
    if (args.dst !== undefined) {
      this.dst = args.dst;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.ranking !== undefined) {
      this.ranking = args.ranking;
    }
    if (args.props !== undefined) {
      this.props = args.props;
    }
  }
};
nebula.Edge.prototype = {};
nebula.Edge.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.src = input.readString()
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dst = input.readString()
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32()
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString()
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.ranking = input.readI64()
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.MAP) {
        var _size68 = 0;
        var _rtmp372;
        this.props = {};
        var _ktype69 = 0;
        var _vtype70 = 0;
        _rtmp372 = input.readMapBegin();
        _ktype69 = _rtmp372.ktype;
        _vtype70 = _rtmp372.vtype;
        _size68 = _rtmp372.size;
        for (var _i73 = 0; _i73 < _size68; ++_i73)
        {
          if (_i73 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key74 = null;
          var val75 = null;
          key74 = input.readString()
          val75 = new nebula.Value();
          val75.read(input);
          this.props[key74] = val75;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

nebula.Edge.prototype.write = function(output) {
  output.writeStructBegin('Edge');
  if (this.src !== null && this.src !== undefined) {
    output.writeFieldBegin('src', Thrift.Type.STRING, 1);
    output.writeString(this.src);
    output.writeFieldEnd();
  }
  if (this.dst !== null && this.dst !== undefined) {
    output.writeFieldBegin('dst', Thrift.Type.STRING, 2);
    output.writeString(this.dst);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 4);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.ranking !== null && this.ranking !== undefined) {
    output.writeFieldBegin('ranking', Thrift.Type.I64, 5);
    output.writeI64(this.ranking);
    output.writeFieldEnd();
  }
  if (this.props !== null && this.props !== undefined) {
    output.writeFieldBegin('props', Thrift.Type.MAP, 6);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.props));
    for (var kiter76 in this.props)
    {
      if (this.props.hasOwnProperty(kiter76))
      {
        var viter77 = this.props[kiter76];
        output.writeString(kiter76);
        viter77.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

nebula.Step = function(args) {
  this.dst = null;
  this.type = null;
  this.name = null;
  this.ranking = null;
  this.props = null;
  if (args) {
    if (args.dst !== undefined) {
      this.dst = args.dst;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.ranking !== undefined) {
      this.ranking = args.ranking;
    }
    if (args.props !== undefined) {
      this.props = args.props;
    }
  }
};
nebula.Step.prototype = {};
nebula.Step.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.dst = new nebula.Vertex();
        this.dst.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32()
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString()
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.ranking = input.readI64()
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size78 = 0;
        var _rtmp382;
        this.props = {};
        var _ktype79 = 0;
        var _vtype80 = 0;
        _rtmp382 = input.readMapBegin();
        _ktype79 = _rtmp382.ktype;
        _vtype80 = _rtmp382.vtype;
        _size78 = _rtmp382.size;
        for (var _i83 = 0; _i83 < _size78; ++_i83)
        {
          if (_i83 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key84 = null;
          var val85 = null;
          key84 = input.readString()
          val85 = new nebula.Value();
          val85.read(input);
          this.props[key84] = val85;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

nebula.Step.prototype.write = function(output) {
  output.writeStructBegin('Step');
  if (this.dst !== null && this.dst !== undefined) {
    output.writeFieldBegin('dst', Thrift.Type.STRUCT, 1);
    this.dst.write(output);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.ranking !== null && this.ranking !== undefined) {
    output.writeFieldBegin('ranking', Thrift.Type.I64, 4);
    output.writeI64(this.ranking);
    output.writeFieldEnd();
  }
  if (this.props !== null && this.props !== undefined) {
    output.writeFieldBegin('props', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.props));
    for (var kiter86 in this.props)
    {
      if (this.props.hasOwnProperty(kiter86))
      {
        var viter87 = this.props[kiter86];
        output.writeString(kiter86);
        viter87.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

nebula.Path = function(args) {
  this.src = null;
  this.steps = null;
  if (args) {
    if (args.src !== undefined) {
      this.src = args.src;
    }
    if (args.steps !== undefined) {
      this.steps = args.steps;
    }
  }
};
nebula.Path.prototype = {};
nebula.Path.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.src = new nebula.Vertex();
        this.src.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size88 = 0;
        var _rtmp392;
        this.steps = [];
        var _etype91 = 0;
        _rtmp392 = input.readListBegin();
        _etype91 = _rtmp392.etype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          var elem94 = null;
          elem94 = new nebula.Step();
          elem94.read(input);
          this.steps.push(elem94);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

nebula.Path.prototype.write = function(output) {
  output.writeStructBegin('Path');
  if (this.src !== null && this.src !== undefined) {
    output.writeFieldBegin('src', Thrift.Type.STRUCT, 1);
    this.src.write(output);
    output.writeFieldEnd();
  }
  if (this.steps !== null && this.steps !== undefined) {
    output.writeFieldBegin('steps', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.steps.length);
    for (var iter95 in this.steps)
    {
      if (this.steps.hasOwnProperty(iter95))
      {
        iter95 = this.steps[iter95];
        iter95.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

nebula.HostAddr = function(args) {
  this.host = null;
  this.port = null;
  if (args) {
    if (args.host !== undefined) {
      this.host = args.host;
    }
    if (args.port !== undefined) {
      this.port = args.port;
    }
  }
};
nebula.HostAddr.prototype = {};
nebula.HostAddr.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.host = input.readString()
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.port = input.readI32()
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

nebula.HostAddr.prototype.write = function(output) {
  output.writeStructBegin('HostAddr');
  if (this.host !== null && this.host !== undefined) {
    output.writeFieldBegin('host', Thrift.Type.STRING, 1);
    output.writeString(this.host);
    output.writeFieldEnd();
  }
  if (this.port !== null && this.port !== undefined) {
    output.writeFieldBegin('port', Thrift.Type.I32, 2);
    output.writeI32(this.port);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

nebula.KeyValue = function(args) {
  this.key = null;
  this.value = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
nebula.KeyValue.prototype = {};
nebula.KeyValue.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString()
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString()
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

nebula.KeyValue.prototype.write = function(output) {
  output.writeStructBegin('KeyValue');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

